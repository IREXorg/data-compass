# Generated by Django 3.0.3 on 2020-03-11 15:10

from django.conf import settings
import django.contrib.postgres.fields.jsonb
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('surveys', '0034_add_response_ordering'),
    ]

    operations = [
        migrations.AddField(
            model_name='datasetstorage',
            name='creator',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created_survey_dataset_storages', related_query_name='created_survey_dataset_storage', to=settings.AUTH_USER_MODEL, verbose_name='creator'),
        ),
        migrations.AddField(
            model_name='entity',
            name='survey',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='entities', related_query_name='entity', to='surveys.Survey', verbose_name='survey'),
        ),
        migrations.AddField(
            model_name='role',
            name='survey',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='roles', related_query_name='role', to='surveys.Survey', verbose_name='survey'),
        ),
        migrations.AddField(
            model_name='survey',
            name='allow_respondent_datasets',
            field=models.BooleanField(blank=True, choices=[(True, 'Yes'), (False, 'No')], default=False, help_text='If Yes, respondents will be able to add their own datasets.', verbose_name='allow respondent datasets'),
        ),
        migrations.AddField(
            model_name='survey',
            name='allow_respondent_entities',
            field=models.BooleanField(blank=True, choices=[(True, 'Yes'), (False, 'No')], default=False, help_text='If Yes, respondents will be able to add their own entities.', verbose_name='allow respondent entities'),
        ),
        migrations.AddField(
            model_name='survey',
            name='allow_respondent_storages',
            field=models.BooleanField(blank=True, choices=[(True, 'Yes'), (False, 'No')], default=False, help_text='If Yes, respondents will be able to add their own storages.', verbose_name='allow respondent storages'),
        ),
        migrations.AddField(
            model_name='survey',
            name='allow_respondent_topics',
            field=models.BooleanField(blank=True, choices=[(True, 'Yes'), (False, 'No')], default=False, help_text='If Yes, respondents will be able to add their own topics.', verbose_name='allow respondent topics'),
        ),
        migrations.AddField(
            model_name='survey',
            name='closing_text',
            field=models.TextField(default='', help_text='What text do you want to appear when a respondent ends the survey?', verbose_name='closing text'),
        ),
        migrations.AddField(
            model_name='survey',
            name='introduction_text',
            field=models.TextField(default='', help_text='What text do you want to appear when a respondent begins the survey?', verbose_name='introduction text'),
        ),
        migrations.AddField(
            model_name='survey',
            name='respondent_topic_number',
            field=models.PositiveSmallIntegerField(default=10, help_text='Up to 10 topics are allowed', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)], verbose_name='respondent topic number'),
        ),
        migrations.AlterField(
            model_name='entity',
            name='hierarchy',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='entities', related_query_name='entity', to='surveys.DataflowHierarchy', verbose_name='hierarchy'),
        ),
        migrations.AlterField(
            model_name='survey',
            name='login_required',
            field=models.BooleanField(blank=True, choices=[(True, 'Yes'), (False, 'No')], default=True, help_text="If no, they won't be able to save and return to their results, or view previous results.", verbose_name='login required'),
        ),
        migrations.AlterField(
            model_name='survey',
            name='respondent_can_aggregate',
            field=models.BooleanField(blank=True, choices=[(True, 'Yes'), (False, 'No')], default=True, help_text="'Yes', will update their networ visual with all users' responses in realtime. 'No' will not.", verbose_name='respondent can aggregate'),
        ),
        migrations.AlterField(
            model_name='survey',
            name='respondent_can_invite',
            field=models.BooleanField(blank=True, choices=[(True, 'Yes'), (False, 'No')], default=True, help_text='If Yes, the survey will include question collecting email address. Respondents are responsible for ensuring consent.', verbose_name='respondent can suggest others'),
        ),
        migrations.CreateModel(
            name='Logo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('modified_at', models.DateTimeField(auto_now=True, verbose_name='modified')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True, verbose_name='UUID')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('image', models.ImageField(blank=True, null=True, upload_to='surveys/logos', verbose_name='image')),
                ('extras', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, verbose_name='extras')),
                ('creator', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='created_survey_logos', related_query_name='created_survey_logo', to=settings.AUTH_USER_MODEL, verbose_name='creator')),
                ('survey', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='logos', related_query_name='logo', to='surveys.Survey', verbose_name='survey')),
            ],
            options={
                'verbose_name': 'Logo',
                'verbose_name_plural': 'Logos',
            },
        ),
    ]
